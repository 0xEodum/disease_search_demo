"""
Sync Manager –¥–ª—è Medical Lab Disease Search Engine
–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–µ–π –º–µ–∂–¥—É MongoDB –∏ in-memory –ø–æ–∏—Å–∫–æ–≤—ã–º –¥–≤–∏–∂–∫–æ–º
"""

import asyncio
import time
from datetime import datetime
from typing import Optional
from pymongo import MongoClient
from disease_search_engine import MedicalLabAnalyzer


class SyncManager:
    """
    –ú–µ–Ω–µ–¥–∂–µ—Ä —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö
    –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ MongoDB –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç in-memory –¥–≤–∏–∂–æ–∫
    """
    
    def __init__(
        self,
        analyzer: MedicalLabAnalyzer,
        mongodb_client: MongoClient,
        db_name: str = "medical_lab",
        check_interval: int = 3600  # 1 —á–∞—Å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    ):
        """
        Args:
            analyzer: –≠–∫–∑–µ–º–ø–ª—è—Ä MedicalLabAnalyzer
            mongodb_client: MongoClient –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB
            db_name: –ò–º—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            check_interval: –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π (—Å–µ–∫—É–Ω–¥—ã)
        """
        self.analyzer = analyzer
        self.mongodb_client = mongodb_client
        self.db_name = db_name
        self.check_interval = check_interval
        self.db = mongodb_client[db_name]
        
        self.current_version: Optional[int] = None
        self.last_check_time: Optional[datetime] = None
        self.is_running = False
    
    async def start(self):
        """–ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏"""
        self.is_running = True
        
        print("=" * 60)
        print("üîÑ Sync Manager Started")
        print("=" * 60)
        print(f"  Database: {self.db_name}")
        print(f"  Check interval: {self.check_interval} seconds")
        print("=" * 60)
        
        # –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞
        await self._check_and_sync()
        
        # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª
        while self.is_running:
            try:
                await asyncio.sleep(self.check_interval)
                await self._check_and_sync()
            except Exception as e:
                print(f"‚ùå Sync error: {e}")
                await asyncio.sleep(60)  # –ü–æ–¥–æ–∂–¥–∞—Ç—å –º–∏–Ω—É—Ç—É –ø—Ä–∏ –æ—à–∏–±–∫–µ
    
    def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏"""
        self.is_running = False
        print("\nüõë Sync Manager Stopped")
    
    async def _check_and_sync(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–∏ –∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏"""
        self.last_check_time = datetime.utcnow()
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –≤–µ—Ä—Å–∏—é –∏–∑ MongoDB
        metadata = self.db.metadata.find_one({"data_type": "idf_weights"})
        
        if not metadata:
            print("\n‚ö†Ô∏è  No metadata found in MongoDB")
            return
        
        db_version = metadata['version']
        
        # –ü–µ—Ä–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∏–ª–∏ –≤–µ—Ä—Å–∏—è –∏–∑–º–µ–Ω–∏–ª–∞—Å—å?
        if self.current_version is None:
            print("\nüì• Initial data load from MongoDB...")
            await self._sync_data()
            self.current_version = db_version
        elif db_version != self.current_version:
            print(f"\nüì• Data version changed: {self.current_version} ‚Üí {db_version}")
            await self._sync_data()
            self.current_version = db_version
        else:
            print(f"\n‚úì Data is up-to-date (version: {self.current_version})")
    
    async def _sync_data(self):
        """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ MongoDB"""
        start_time = time.time()
        
        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ MongoDB
            self.analyzer.load_references_from_mongodb(self.db_name)
            self.analyzer.load_diseases_from_mongodb(self.db_name)
            
            elapsed = (time.time() - start_time) * 1000
            print(f"‚úÖ Data synchronized in {elapsed:.2f} ms")
            
        except Exception as e:
            print(f"‚ùå Sync failed: {e}")
            raise
    
    def force_sync(self):
        """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è (–¥–ª—è –≤—ã–∑–æ–≤–∞ –∏–∑ API)"""
        print("\nüîÑ Force sync requested...")
        
        start_time = time.time()
        
        self.analyzer.load_references_from_mongodb(self.db_name)
        self.analyzer.load_diseases_from_mongodb(self.db_name)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –≤–µ—Ä—Å–∏—é
        metadata = self.db.metadata.find_one({"data_type": "idf_weights"})
        if metadata:
            self.current_version = metadata['version']
        
        elapsed = (time.time() - start_time) * 1000
        
        return {
            "success": True,
            "version": self.current_version,
            "sync_time_ms": elapsed,
            "timestamp": datetime.utcnow().isoformat()
        }
    
    def get_status(self) -> dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏"""
        metadata = self.db.metadata.find_one({"data_type": "idf_weights"})
        
        db_version = metadata['version'] if metadata else None
        in_sync = db_version == self.current_version if db_version else False
        
        return {
            "is_running": self.is_running,
            "current_version": self.current_version,
            "db_version": db_version,
            "in_sync": in_sync,
            "last_check": self.last_check_time.isoformat() if self.last_check_time else None,
            "check_interval_seconds": self.check_interval
        }


class SimpleSyncManager:
    """
    –£–ø—Ä–æ—â—ë–Ω–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –±–µ–∑ asyncio
    –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –ø—Ä–æ—Å—Ç—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è—Ö
    """
    
    def __init__(
        self,
        analyzer: MedicalLabAnalyzer,
        mongodb_client: MongoClient,
        db_name: str = "medical_lab"
    ):
        self.analyzer = analyzer
        self.mongodb_client = mongodb_client
        self.db_name = db_name
        self.db = mongodb_client[db_name]
        self.current_version: Optional[int] = None
    
    def sync_if_changed(self) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å
        
        Returns:
            True –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–∏–ª–∏—Å—å, False –µ—Å–ª–∏ –Ω–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π
        """
        metadata = self.db.metadata.find_one({"data_type": "idf_weights"})
        
        if not metadata:
            return False
        
        db_version = metadata['version']
        
        # –ü–µ—Ä–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∏–ª–∏ –≤–µ—Ä—Å–∏—è –∏–∑–º–µ–Ω–∏–ª–∞—Å—å?
        if self.current_version is None or db_version != self.current_version:
            print(f"\nüì• Syncing data from MongoDB (version: {db_version})...")
            
            start_time = time.time()
            
            self.analyzer.load_references_from_mongodb(self.db_name)
            self.analyzer.load_diseases_from_mongodb(self.db_name)
            
            self.current_version = db_version
            
            elapsed = (time.time() - start_time) * 1000
            print(f"‚úÖ Data synchronized in {elapsed:.2f} ms")
            
            return True
        
        return False
    
    def force_sync(self):
        """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è"""
        print("\nüîÑ Force sync from MongoDB...")
        
        start_time = time.time()
        
        self.analyzer.load_references_from_mongodb(self.db_name)
        self.analyzer.load_diseases_from_mongodb(self.db_name)
        
        metadata = self.db.metadata.find_one({"data_type": "idf_weights"})
        if metadata:
            self.current_version = metadata['version']
        
        elapsed = (time.time() - start_time) * 1000
        print(f"‚úÖ Data synchronized in {elapsed:.2f} ms")


# ============================================================
# –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
# ============================================================

async def example_async_sync():
    """–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å async/await"""
    from pymongo import MongoClient
    
    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB
    client = MongoClient("mongodb://localhost:27017")
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ —Å MongoDB –∫–ª–∏–µ–Ω—Ç–æ–º
    analyzer = MedicalLabAnalyzer(mongodb_client=client)
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
    sync_manager = SyncManager(
        analyzer=analyzer,
        mongodb_client=client,
        db_name="medical_lab",
        check_interval=3600  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–π —á–∞—Å
    )
    
    # –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
    sync_task = asyncio.create_task(sync_manager.start())
    
    # –û—Å–Ω–æ–≤–Ω–∞—è —Ä–∞–±–æ—Ç–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    try:
        while True:
            # –¢—É—Ç –≤–∞—à–∞ –ª–æ–≥–∏–∫–∞...
            await asyncio.sleep(1)
    except KeyboardInterrupt:
        sync_manager.stop()
        await sync_task


def example_simple_sync():
    """–ü—Ä–∏–º–µ—Ä –ø—Ä–æ—Å—Ç–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –±–µ–∑ async"""
    from pymongo import MongoClient
    
    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB
    client = MongoClient("mongodb://localhost:27017")
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞
    analyzer = MedicalLabAnalyzer(mongodb_client=client)
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Å—Ç–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
    sync_manager = SimpleSyncManager(
        analyzer=analyzer,
        mongodb_client=client,
        db_name="medical_lab"
    )
    
    # –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞
    sync_manager.sync_if_changed()
    
    # –í –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º
    while True:
        # –í–∞—à–∞ –ª–æ–≥–∏–∫–∞...
        time.sleep(3600)  # –ö–∞–∂–¥—ã–π —á–∞—Å
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        if sync_manager.sync_if_changed():
            print("üìä Data was updated!")


def example_fastapi_integration():
    """–ü—Ä–∏–º–µ—Ä –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å FastAPI"""
    print("""
    # api.py —Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–µ–π
    
    from fastapi import FastAPI
    from pymongo import MongoClient
    from disease_search_engine import MedicalLabAnalyzer
    from sync_manager import SyncManager
    
    app = FastAPI()
    
    # –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
    mongodb_client = MongoClient("mongodb://localhost:27017")
    analyzer = MedicalLabAnalyzer(mongodb_client=mongodb_client)
    sync_manager = None
    
    @app.on_event("startup")
    async def startup():
        global sync_manager
        
        # –°–æ–∑–¥–∞—ë–º –º–µ–Ω–µ–¥–∂–µ—Ä —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        sync_manager = SyncManager(
            analyzer=analyzer,
            mongodb_client=mongodb_client,
            check_interval=3600  # 1 —á–∞—Å
        )
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É
        asyncio.create_task(sync_manager.start())
    
    @app.on_event("shutdown")
    async def shutdown():
        if sync_manager:
            sync_manager.stop()
    
    @app.post("/api/analyze")
    async def analyze(request: AnalysisRequest):
        results = analyzer.analyze_patient(...)
        return {"results": results}
    
    @app.get("/api/sync/status")
    async def sync_status():
        return sync_manager.get_status()
    
    @app.post("/api/sync/force")
    async def force_sync():
        result = sync_manager.force_sync()
        return result
    """)


if __name__ == "__main__":
    print("=" * 60)
    print("Sync Manager Examples")
    print("=" * 60)
    print("\n1. Async sync (with background task)")
    print("2. Simple sync (periodic check)")
    print("3. FastAPI integration example")
    
    choice = input("\nChoose example to view: ").strip()
    
    if choice == "1":
        print("\n" + "=" * 60)
        print("Running async sync example...")
        print("=" * 60)
        print("Press Ctrl+C to stop\n")
        try:
            asyncio.run(example_async_sync())
        except KeyboardInterrupt:
            print("\nStopped")
    elif choice == "2":
        example_simple_sync()
    elif choice == "3":
        example_fastapi_integration()
